import numpy as np

class integration:
    INTEGRATION = 1
    MAX = 2

def Gaussian_Integral_1D(a, b, f, n, integration_type = integration.INTEGRATION):
    '''
    a : the lower bound.
    b : the upper bound.
    f : the function of integral.
    n : the number of points which is used to approximate the integral.
    return : the integral of function f in domain [a, b]
    '''
    shift_x = lambda s : (b + a + (b - a) * s) / 2
    N_MAX = 30
    n = int(n)
    if n<1 or n >N_MAX:
        ValueError("The number of n=%d exceeds the limit!" % n)
    elif n == 1:
        # gauss points for 1D quadrature
        nodes = np.array([
            # Coordinates for 1-point rule
            0.000000000000000],dtype=np.float64)
        # weights for 1D quadrature
        weights = np.array([
            # Weights for 1-point rule
            2.000000000000000],dtype=np.float64)
    elif n == 2:
        nodes = np.array([
        # Coordinates for 2-point rule
        0.577350269189626,
        -0.577350269189626],dtype=np.float64)
        weights = np.array([
            # Weights for 2-point rule
            1.000000000000000,
            1.000000000000000],dtype=np.float64)
    elif n == 3:
        nodes = np.array([
        # Coordinates for 3-point rule
        0.774596669241483,
        0.000000000000000,
        -0.774596669241483],dtype=np.float64)
        weights = np.array([
            # Weights for 3-point rule
            0.555555555555554,
            0.888888888888889,
            0.555555555555554],dtype=np.float64)
    elif n == 4:
        nodes = np.array([
        # Coordinates for 4-point rule
        0.861136311594052,
        0.339981043584856,
        -0.339981043584856,
        -0.861136311594052],dtype=np.float64)
        weights = np.array([
            # Weights for 4-point rule
            0.347854845137454,
            0.652145154862546,
            0.652145154862546,
            0.347854845137454],dtype=np.float64)
    elif n == 5:
        nodes = np.array([
        # Coordinates for 5-point rule
        0.906179845938664,
        0.538469310105683,
        0.000000000000000,
        -0.538469310105683,
        -0.906179845938664],dtype=np.float64)
        weights = np.array([
            # Weights for 5-point rule
            0.236926885056189,
            0.478628670499366,
            0.568888888888889,
            0.478628670499366,
            0.236926885056189],dtype=np.float64)
    elif n == 6:
        nodes = np.array([
        # Coordinates for 6-point rule
        0.932469514203152,
        0.661209386466264,
        0.238619186083197,
        -0.238619186083197,
        -0.661209386466264,
        -0.932469514203152],dtype=np.float64)
        weights = np.array([
            # Weights for 6-point rule
            0.171324492379170,
            0.360761573048139,
            0.467913934572691,
            0.467913934572691,
            0.360761573048139,
            0.171324492379170],dtype=np.float64)
    elif n == 7:
        nodes = np.array([
        # Coordinates for 7-point rule
        0.949107912342758,
        0.741531185599394,
        0.405845151377397,
        0.000000000000000,
        -0.405845151377397,
        -0.741531185599394,
        -0.949107912342758],dtype=np.float64)
        weights = np.array([
            # Weights for 7-point rule
            0.129484966168870,
            0.279705391489277,
            0.381830050505119,
            0.417959183673469,
            0.381830050505119,
            0.279705391489277,
            0.129484966168870],dtype=np.float64)
    elif n == 8:
        nodes = np.array([
        # Coordinates for 8-point rule
        0.960289856497536,
        0.796666477413627,
        0.525532409916329,
        0.183434642495650,
        -0.183434642495650,
        -0.525532409916329,
        -0.796666477413627,
        -0.960289856497536],dtype=np.float64)
        weights = np.array([
            # Weights for 8-point rule
            0.101228536290377,
            0.222381034453374,
            0.313706645877887,
            0.362683783378362,
            0.362683783378362,
            0.313706645877887,
            0.222381034453374,
            0.101228536290377],dtype=np.float64)
    elif n == 9:
        nodes = np.array([
        # Coordinates for 9-point rule
        0.968160239507626,
        0.836031107326636,
        0.613371432700590,
        0.324253423403809,
        0.000000000000000,
        -0.324253423403809,
        -0.613371432700590,
        -0.836031107326636,
        -0.968160239507626],dtype=np.float64)
        weights = np.array([
            # Weights for 9-point rule
            0.081274388361575,
            0.180648160694857,
            0.260610696402936,
            0.312347077040003,
            0.330239355001260,
            0.312347077040003,
            0.260610696402936,
            0.180648160694857,
            0.081274388361575],dtype=np.float64)
    elif n == 10:
        nodes = np.array([
        # Coordinates for 10-point rule
        0.973906528517172,
        0.865063366688985,
        0.679409568299024,
        0.433395394129247,
        0.148874338981631,
        -0.148874338981631,
        -0.433395394129247,
        -0.679409568299024,
        -0.865063366688985,
        -0.973906528517172],dtype=np.float64)
        weights = np.array([
            # Weights for 10-point rule
            0.066671344308688,
            0.149451349150581,
            0.219086362515982,
            0.269266719309996,
            0.295524224714753,
            0.295524224714753,
            0.269266719309996,
            0.219086362515982,
            0.149451349150581,
            0.066671344308688],dtype=np.float64)
    elif n == 11:
        nodes = np.array([
        # Coordinates for 11-point rule
        0.978228658146057,
        0.887062599768095,
        0.730152005574049,
        0.519096129206812,
        0.269543155952345,
        0.000000000000000,
        -0.269543155952345,
        -0.519096129206812,
        -0.730152005574049,
        -0.887062599768095,
        -0.978228658146057],dtype=np.float64)
        weights = np.array([
            # Weights for 11-point rule
            0.055668567116174,
            0.125580369464904,
            0.186290210927734,
            0.233193764591990,
            0.262804544510247,
            0.272925086777901,
            0.262804544510247,
            0.233193764591990,
            0.186290210927734,
            0.125580369464904,
            0.055668567116174],dtype=np.float64)
    elif n == 12:
        nodes = np.array([
        # Coordinates for 12-point rule
        0.981560634246719,
        0.904117256370475,
        0.769902674194305,
        0.587317954286617,
        0.367831498998180,
        0.125233408511469,
        -0.125233408511469,
        -0.367831498998180,
        -0.587317954286617,
        -0.769902674194305,
        -0.904117256370475,
        -0.981560634246719],dtype=np.float64)
        weights = np.array([
            # Weights for 12-point rule
            0.047175336386512,
            0.106939325995318,
            0.160078328543346,
            0.203167426723066,
            0.233492536538355,
            0.249147045813403,
            0.249147045813403,
            0.233492536538355,
            0.203167426723066,
            0.160078328543346,
            0.106939325995318,
            0.047175336386512],dtype=np.float64)
    elif n == 13:
        nodes = np.array([
        # Coordinates for 13-point rule
        0.984183054718588,
        0.917598399222978,
        0.801578090733310,
        0.642349339440340,
        0.448492751036447,
        0.230458315955135,
        0.000000000000000,
        -0.230458315955135,
        -0.448492751036447,
        -0.642349339440340,
        -0.801578090733310,
        -0.917598399222978,
        -0.984183054718588],dtype=np.float64)
        weights = np.array([
            # Weights for 13-point rule
            0.040484004765316,
            0.092121499837728,
            0.138873510219787,
            0.178145980761946,
            0.207816047536888,
            0.226283180262897,
            0.232551553230874,
            0.226283180262897,
            0.207816047536888,
            0.178145980761946,
            0.138873510219787,
            0.092121499837728,
            0.040484004765316],dtype=np.float64)
    elif n == 14:
        nodes = np.array([
        # Coordinates for 14-point rule
        0.986283808696812,
        0.928434883663574,
        0.827201315069765,
        0.687292904811685,
        0.515248636358154,
        0.319112368927890,
        0.108054948707344,
        -0.108054948707344,
        -0.319112368927890,
        -0.515248636358154,
        -0.687292904811685,
        -0.827201315069765,
        -0.928434883663574,
        -0.986283808696812],dtype=np.float64)
        weights = np.array([
            # Weights for 14-point rule
            0.035119460331752,
            0.080158087159760,
            0.121518570687903,
            0.157203167158194,
            0.185538397477938,
            0.205198463721296,
            0.215263853463158,
            0.215263853463158,
            0.205198463721296,
            0.185538397477938,
            0.157203167158194,
            0.121518570687903,
            0.080158087159760,
            0.035119460331752],dtype=np.float64)
    elif n == 15:
        nodes = np.array([
        # Coordinates for 15-point rule
        0.987992518020485,
        0.937273392400706,
        0.848206583410427,
        0.724417731360170,
        0.570972172608539,
        0.394151347077563,
        0.201194093997435,
        0.000000000000000,
        -0.201194093997435,
        -0.394151347077563,
        -0.570972172608539,
        -0.724417731360170,
        -0.848206583410427,
        -0.937273392400706,
        -0.987992518020485],dtype=np.float64)
        weights = np.array([
            # Weights for 15-point rule
            0.030753241996117,
            0.070366047488108,
            0.107159220467172,
            0.139570677926154,
            0.166269205816994,
            0.186161000015562,
            0.198431485327112,
            0.202578241925561,
            0.198431485327112,
            0.186161000015562,
            0.166269205816994,
            0.139570677926154,
            0.107159220467172,
            0.070366047488108,
            0.030753241996117],dtype=np.float64)
    elif n == 16:
        nodes = np.array([
        # Coordinates for 16-point rule
        0.989400934991650,
        0.944575023073233,
        0.865631202387832,
        0.755404408355003,
        0.617876244402644,
        0.458016777657227,
        0.281603550779259,
        0.095012509837637,
        -0.095012509837637,
        -0.281603550779259,
        -0.458016777657227,
        -0.617876244402644,
        -0.755404408355003,
        -0.865631202387832,
        -0.944575023073233,
        -0.989400934991650],dtype=np.float64)
        weights = np.array([
            # Weights for 16-point rule
            0.027152459411754,
            0.062253523938648,
            0.095158511682493,
            0.124628971255534,
            0.149595988816577,
            0.169156519395003,
            0.182603415044924,
            0.189450610455068,
            0.189450610455068,
            0.182603415044924,
            0.169156519395003,
            0.149595988816577,
            0.124628971255534,
            0.095158511682493,
            0.062253523938648,
            0.027152459411754],dtype=np.float64)
    elif n == 17:
        nodes = np.array([
        # Coordinates for 17-point rule
        0.990575475314417,
        0.950675521768768,
        0.880239153726986,
        0.781514003896801,
        0.657671159216691,
        0.512690537086477,
        0.351231763453876,
        0.178484181495848,
        0.000000000000000,
        -0.178484181495848,
        -0.351231763453876,
        -0.512690537086477,
        -0.657671159216691,
        -0.781514003896801,
        -0.880239153726986,
        -0.950675521768768,
        -0.990575475314417],dtype=np.float64)
        weights = np.array([
            # Weights for 17-point rule
            0.024148302868548,
            0.055459529373987,
            0.085036148317179,
            0.111883847193404,
            0.135136368468525,
            0.154045761076810,
            0.168004102156450,
            0.176562705366993,
            0.179446470356207,
            0.176562705366993,
            0.168004102156450,
            0.154045761076810,
            0.135136368468525,
            0.111883847193404,
            0.085036148317179,
            0.055459529373987,
            0.024148302868548],dtype=np.float64)
    elif n == 18:
        nodes = np.array([
        # Coordinates for 18-point rule
        0.991565168420931,
        0.955823949571398,
        0.892602466497556,
        0.803704958972523,
        0.691687043060353,
        0.559770831073948,
        0.411751161462843,
        0.251886225691506,
        0.084775013041735,
        -0.084775013041735,
        -0.251886225691506,
        -0.411751161462843,
        -0.559770831073948,
        -0.691687043060353,
        -0.803704958972523,
        -0.892602466497556,
        -0.955823949571398,
        -0.991565168420931],dtype=np.float64)
        weights = np.array([
            # Weights for 18-point rule
            0.021616013526483,
            0.049714548894969,
            0.076425730254889,
            0.100942044106287,
            0.122555206711478,
            0.140642914670651,
            0.154684675126265,
            0.164276483745833,
            0.169142382963144,
            0.169142382963144,
            0.164276483745833,
            0.154684675126265,
            0.140642914670651,
            0.122555206711478,
            0.100942044106287,
            0.076425730254889,
            0.049714548894969,
            0.021616013526483],dtype=np.float64)
    elif n == 19:
        nodes = np.array([
        # Coordinates for 19-point rule
        0.992406843843584,
        0.960208152134830,
        0.903155903614818,
        0.822714656537143,
        0.720966177335229,
        0.600545304661681,
        0.464570741375961,
        0.316564099963630,
        0.160358645640225,
        0.000000000000000,
        -0.160358645640225,
        -0.316564099963630,
        -0.464570741375961,
        -0.600545304661681,
        -0.720966177335229,
        -0.822714656537143,
        -0.903155903614818,
        -0.960208152134830,
        -0.992406843843584],dtype=np.float64)
        weights = np.array([
            # Weights for 19-point rule
            0.019461788229726,
            0.044814226765699,
            0.069044542737641,
            0.091490021622450,
            0.111566645547334,
            0.128753962539336,
            0.142606702173607,
            0.152766042065860,
            0.158968843393954,
            0.161054449848784,
            0.158968843393954,
            0.152766042065860,
            0.142606702173607,
            0.128753962539336,
            0.111566645547334,
            0.091490021622450,
            0.069044542737641,
            0.044814226765699,
            0.019461788229726],dtype=np.float64)
    elif n == 20:
        nodes = np.array([
        # Coordinates for 20-point rule
        0.993128599185095,
        0.963971927277914,
        0.912234428251326,
        0.839116971822219,
        0.746331906460151,
        0.636053680726515,
        0.510867001950827,
        0.373706088715420,
        0.227785851141645,
        0.076526521133497,
        -0.076526521133497,
        -0.227785851141645,
        -0.373706088715420,
        -0.510867001950827,
        -0.636053680726515,
        -0.746331906460151,
        -0.839116971822219,
        -0.912234428251326,
        -0.963971927277914,
        -0.993128599185095],dtype=np.float64)
        weights = np.array([
            # Weights for 20-point rule
            0.017614007139152,
            0.040601429800387,
            0.062672048334109,
            0.083276741576705,
            0.101930119817240,
            0.118194531961518,
            0.131688638449177,
            0.142096109318382,
            0.149172986472604,
            0.152753387130726,
            0.152753387130726,
            0.149172986472604,
            0.142096109318382,
            0.131688638449177,
            0.118194531961518,
            0.101930119817240,
            0.083276741576705,
            0.062672048334109,
            0.040601429800387,
            0.017614007139152],dtype=np.float64)
    elif n == 21:
        nodes = np.array([
        # Coordinates for 21-point rule
        0.993752170620390,
        0.967226838566306,
        0.920099334150401,
        0.853363364583317,
        0.768439963475678,
        0.667138804197412,
        0.551618835887220,
        0.424342120207439,
        0.288021316802401,
        0.145561854160895,
        0.000000000000000,
        -0.145561854160895,
        -0.288021316802401,
        -0.424342120207439,
        -0.551618835887220,
        -0.667138804197412,
        -0.768439963475678,
        -0.853363364583317,
        -0.920099334150401,
        -0.967226838566306,
        -0.993752170620390],dtype=np.float64)
        weights = np.array([
            # Weights for 21-point rule
            0.016017228257775,
            0.036953789770853,
            0.057134425426857,
            0.076100113628379,
            0.093444423456034,
            0.108797299167148,
            0.121831416053728,
            0.132268938633337,
            0.139887394791073,
            0.144524403989970,
            0.146081133649690,
            0.144524403989970,
            0.139887394791073,
            0.132268938633337,
            0.121831416053728,
            0.108797299167148,
            0.093444423456034,
            0.076100113628379,
            0.057134425426857,
            0.036953789770853,
            0.016017228257775],dtype=np.float64)
    elif n == 22:
        nodes = np.array([
        # Coordinates for 22-point rule
        0.994294585482399,
        0.970060497835429,
        0.926956772187174,
        0.865812577720300,
        0.787816805979208,
        0.694487263186683,
        0.587640403506912,
        0.469355837986757,
        0.341935820892084,
        0.207860426688221,
        0.069739273319722,
        -0.069739273319722,
        -0.207860426688221,
        -0.341935820892084,
        -0.469355837986757,
        -0.587640403506912,
        -0.694487263186683,
        -0.787816805979208,
        -0.865812577720300,
        -0.926956772187174,
        -0.970060497835429,
        -0.994294585482399],dtype=np.float64)
        weights = np.array([
            # Weights for 22-point rule
            0.014627995298272,
            0.033774901584814,
            0.052293335152683,
            0.069796468424520,
            0.085941606217068,
            0.100414144442881,
            0.112932296080539,
            0.123252376810512,
            0.131173504787062,
            0.136541498346015,
            0.139251872855632,
            0.139251872855632,
            0.136541498346015,
            0.131173504787062,
            0.123252376810512,
            0.112932296080539,
            0.100414144442881,
            0.085941606217068,
            0.069796468424520,
            0.052293335152683,
            0.033774901584814,
            0.014627995298272],dtype=np.float64)
    elif n == 23:
        nodes = np.array([
        # Coordinates for 23-point rule
        0.994769334997552,
        0.972542471218115,
        0.932971086826016,
        0.876752358270442,
        0.804888401618840,
        0.718661363131950,
        0.619609875763646,
        0.509501477846007,
        0.390301038030291,
        0.264135680970345,
        0.133256824298466,
        0.000000000000000,
        -0.133256824298466,
        -0.264135680970345,
        -0.390301038030291,
        -0.509501477846007,
        -0.619609875763646,
        -0.718661363131950,
        -0.804888401618840,
        -0.876752358270442,
        -0.932971086826016,
        -0.972542471218115,
        -0.994769334997552],dtype=np.float64)
        weights = np.array([
            # Weights for 23-point rule
            0.013411859487142,
            0.030988005856979,
            0.048037671731085,
            0.064232421408526,
            0.079281411776719,
            0.092915766060035,
            0.104892091464542,
            0.114996640222412,
            0.123049084306729,
            0.128905722188082,
            0.132462039404697,
            0.133654572186106,
            0.132462039404697,
            0.128905722188082,
            0.123049084306729,
            0.114996640222412,
            0.104892091464542,
            0.092915766060035,
            0.079281411776719,
            0.064232421408526,
            0.048037671731085,
            0.030988005856979,
            0.013411859487142],dtype=np.float64)
    elif n == 24:
        nodes = np.array([
        # Coordinates for 24-point rule
        0.995187219997021,
        0.974728555971309,
        0.938274552002733,
        0.886415527004401,
        0.820001985973903,
        0.740124191578554,
        0.648093651936976,
        0.545421471388840,
        0.433793507626045,
        0.315042679696163,
        0.191118867473616,
        0.064056892862606,
        -0.064056892862606,
        -0.191118867473616,
        -0.315042679696163,
        -0.433793507626045,
        -0.545421471388840,
        -0.648093651936976,
        -0.740124191578554,
        -0.820001985973903,
        -0.886415527004401,
        -0.938274552002733,
        -0.974728555971309,
        -0.995187219997021],dtype=np.float64)
        weights = np.array([
            # Weights for 24-point rule
            0.012341229799987,
            0.028531388628933,
            0.044277438817420,
            0.059298584915437,
            0.073346481411080,
            0.086190161531953,
            0.097618652104114,
            0.107444270115966,
            0.115505668053726,
            0.121670472927803,
            0.125837456346828,
            0.127938195346752,
            0.127938195346752,
            0.125837456346828,
            0.121670472927803,
            0.115505668053726,
            0.107444270115966,
            0.097618652104114,
            0.086190161531953,
            0.073346481411080,
            0.059298584915437,
            0.044277438817420,
            0.028531388628933,
            0.012341229799987],dtype=np.float64)
    elif n == 25:
        nodes = np.array([
        # Coordinates for 25-point rule
        0.995556969790498,
        0.976663921459517,
        0.942974571228974,
        0.894991997878275,
        0.833442628760834,
        0.759259263037358,
        0.673566368473468,
        0.577662930241223,
        0.473002731445715,
        0.361172305809388,
        0.243866883720988,
        0.122864692610710,
        0.000000000000000,
        -0.122864692610710,
        -0.243866883720988,
        -0.361172305809388,
        -0.473002731445715,
        -0.577662930241223,
        -0.673566368473468,
        -0.759259263037358,
        -0.833442628760834,
        -0.894991997878275,
        -0.942974571228974,
        -0.976663921459517,
        -0.995556969790498],dtype=np.float64)
        weights = np.array([
            # Weights for 25-point rule
            0.011393798501026,
            0.026354986615032,
            0.040939156701306,
            0.054904695975835,
            0.068038333812357,
            0.080140700335001,
            0.091028261982964,
            0.100535949067051,
            0.108519624474264,
            0.114858259145712,
            0.119455763535785,
            0.122242442990310,
            0.123176053726715,
            0.122242442990310,
            0.119455763535785,
            0.114858259145712,
            0.108519624474264,
            0.100535949067051,
            0.091028261982964,
            0.080140700335001,
            0.068038333812357,
            0.054904695975835,
            0.040939156701306,
            0.026354986615032,
            0.011393798501026],dtype=np.float64)
    elif n == 26:
        nodes = np.array([
        # Coordinates for 26-point rule
        0.995885701145617,
        0.978385445956471,
        0.947159066661714,
        0.902637861984307,
        0.845445942788498,
        0.776385948820679,
        0.696427260419957,
        0.606692293017618,
        0.508440714824506,
        0.403051755123486,
        0.292004839485957,
        0.176858820356890,
        0.059230093429313,
        -0.059230093429313,
        -0.176858820356890,
        -0.292004839485957,
        -0.403051755123486,
        -0.508440714824506,
        -0.606692293017618,
        -0.696427260419957,
        -0.776385948820679,
        -0.845445942788498,
        -0.902637861984307,
        -0.947159066661714,
        -0.978385445956471,
        -0.995885701145617],dtype=np.float64)
        weights = np.array([
            # Weights for 26-point rule
            0.010551372617343,
            0.024417851092632,
            0.037962383294363,
            0.050975825297148,
            0.063274046329575,
            0.074684149765660,
            0.085045894313485,
            0.094213800355914,
            0.102059161094425,
            0.108471840528577,
            0.113361816546320,
            0.116660443485297,
            0.118321415279262,
            0.118321415279262,
            0.116660443485297,
            0.113361816546320,
            0.108471840528577,
            0.102059161094425,
            0.094213800355914,
            0.085045894313485,
            0.074684149765660,
            0.063274046329575,
            0.050975825297148,
            0.037962383294363,
            0.024417851092632,
            0.010551372617343],dtype=np.float64)
    elif n == 27:
        nodes = np.array([
        # Coordinates for 27-point rule
        0.996179262888989,
        0.979923475961501,
        0.950900557814705,
        0.909482320677491,
        0.856207908018294,
        0.791771639070508,
        0.717013473739424,
        0.632907971946495,
        0.540551564579457,
        0.441148251750027,
        0.335993903638509,
        0.226459365439537,
        0.113972585609530,
        0.000000000000000,
        -0.113972585609530,
        -0.226459365439537,
        -0.335993903638509,
        -0.441148251750027,
        -0.540551564579457,
        -0.632907971946495,
        -0.717013473739424,
        -0.791771639070508,
        -0.856207908018294,
        -0.909482320677491,
        -0.950900557814705,
        -0.979923475961501,
        -0.996179262888989],dtype=np.float64)
        weights = np.array([
            # Weights for 27-point rule
            0.009798996051295,
            0.022686231596180,
            0.035297053757420,
            0.047449412520615,
            0.058983536859833,
            0.069748823766245,
            0.079604867773058,
            0.088423158543757,
            0.096088727370029,
            0.102501637817746,
            0.107578285788533,
            0.111252488356845,
            0.113476346108965,
            0.114220867378957,
            0.113476346108965,
            0.111252488356845,
            0.107578285788533,
            0.102501637817746,
            0.096088727370029,
            0.088423158543757,
            0.079604867773058,
            0.069748823766245,
            0.058983536859833,
            0.047449412520615,
            0.035297053757420,
            0.022686231596180,
            0.009798996051295],dtype=np.float64)
    elif n == 28:
        nodes = np.array([
        # Coordinates for 28-point rule
        0.996442497573955,
        0.981303165370873,
        0.954259280628938,
        0.915633026392132,
        0.865892522574395,
        0.805641370917179,
        0.735610878013632,
        0.656651094038865,
        0.569720471811402,
        0.475874224955118,
        0.376251516089079,
        0.272061627635178,
        0.164569282133381,
        0.055079289884034,
        -0.055079289884034,
        -0.164569282133381,
        -0.272061627635178,
        -0.376251516089079,
        -0.475874224955118,
        -0.569720471811402,
        -0.656651094038865,
        -0.735610878013632,
        -0.805641370917179,
        -0.865892522574395,
        -0.915633026392132,
        -0.954259280628938,
        -0.981303165370873,
        -0.996442497573955],dtype=np.float64)
        weights = np.array([
            # Weights for 28-point rule
            0.009124282593095,
            0.021132112592771,
            0.032901427782304,
            0.044272934759004,
            0.055107345675717,
            0.065272923967000,
            0.074646214234569,
            0.083113417228901,
            0.090571744393033,
            0.096930657997930,
            0.102112967578061,
            0.106055765922846,
            0.108711192258294,
            0.110047013016475,
            0.110047013016475,
            0.108711192258294,
            0.106055765922846,
            0.102112967578061,
            0.096930657997930,
            0.090571744393033,
            0.083113417228901,
            0.074646214234569,
            0.065272923967000,
            0.055107345675717,
            0.044272934759004,
            0.032901427782304,
            0.021132112592771,
            0.009124282593095],dtype=np.float64)
    elif n == 29:
        nodes = np.array([
        # Coordinates for 29-point rule
        0.996679442260596,
        0.982545505261413,
        0.957285595778088,
        0.921180232953059,
        0.874637804920103,
        0.818185487615252,
        0.752462851734477,
        0.678214537602686,
        0.596281797138228,
        0.507592955124228,
        0.413152888174009,
        0.314031637867640,
        0.211352286166001,
        0.106278230132679,
        0.000000000000000,
        -0.106278230132679,
        -0.211352286166001,
        -0.314031637867640,
        -0.413152888174009,
        -0.507592955124228,
        -0.596281797138228,
        -0.678214537602686,
        -0.752462851734477,
        -0.818185487615252,
        -0.874637804920103,
        -0.921180232953059,
        -0.957285595778088,
        -0.982545505261413,
        -0.996679442260596],dtype=np.float64)
        weights = np.array([
            # Weights for 29-point rule
            0.008516903878746,
            0.019732085056122,
            0.030740492202094,
            0.041402062518683,
            0.051594826902498,
            0.061203090657079,
            0.070117933255051,
            0.078238327135764,
            0.085472257366172,
            0.091737757139259,
            0.096963834094409,
            0.101091273759915,
            0.104073310077729,
            0.105876155097321,
            0.106479381718314,
            0.105876155097321,
            0.104073310077729,
            0.101091273759915,
            0.096963834094409,
            0.091737757139259,
            0.085472257366172,
            0.078238327135764,
            0.070117933255051,
            0.061203090657079,
            0.051594826902498,
            0.041402062518683,
            0.030740492202094,
            0.019732085056122,
            0.008516903878746],dtype=np.float64)
    elif n == 30:
        nodes = np.array([
        # Coordinates for 30-point rule
        0.996893484074650,
        0.983668123279747,
        0.960021864968307,
        0.926200047429274,
        0.882560535792053,
        0.829565762382768,
        0.767777432104826,
        0.697850494793316,
        0.620526182989243,
        0.536624148142020,
        0.447033769538089,
        0.352704725530878,
        0.254636926167890,
        0.153869913608583,
        0.051471842555318,
        -0.051471842555318,
        -0.153869913608583,
        -0.254636926167890,
        -0.352704725530878,
        -0.447033769538089,
        -0.536624148142020,
        -0.620526182989243,
        -0.697850494793316,
        -0.767777432104826,
        -0.829565762382768,
        -0.882560535792053,
        -0.926200047429274,
        -0.960021864968307,
        -0.983668123279747,
        -0.996893484074650],dtype=np.float64)
        weights = np.array([
            # Weights for 30-point rule
            0.007968192496167,
            0.018466468311091,
            0.028784707883323,
            0.038799192569627,
            0.048402672830594,
            0.057493156217619,
            0.065974229882181,
            0.073755974737705,
            0.080755895229420,
            0.086899787201083,
            0.092122522237786,
            0.096368737174644,
            0.099593420586795,
            0.101762389748405,
            0.102852652893559,
            0.102852652893559,
            0.101762389748405,
            0.099593420586795,
            0.096368737174644,
            0.092122522237786,
            0.086899787201083,
            0.080755895229420,
            0.073755974737705,
            0.065974229882181,
            0.057493156217619,
            0.048402672830594,
            0.038799192569627,
            0.028784707883323,
            0.018466468311091,
            0.007968192496167],dtype=np.float64)
    if integration_type == integration.INTEGRATION:
        integral = (b-a)/2 * np.sum(weights * f(shift_x(nodes)))
    elif integration_type == integration.MAX:
        integral = np.max(f(shift_x(nodes)))
    else:
        ValueError("The integration type is not correct!")
    return integral

# # Test Gauassian_Integral_1D
# a = 1
# b = 2
# for i in range(30):
#     n = i + 1
#     f = lambda x : np.log(x)
#     I = 0.386294361119891
#     integral = Gaussian_Integral_1D(a, b, f, n)
#     print('n:%d I: %f integral: %f error: %10.6e' % (n, I, integral, abs(I-integral)))
#     f = lambda x : (x**2 + 2*x + 1)/(1 + (1+x)**4)
#     I = 0.161442165779443
#     integral = Gaussian_Integral_1D(a, b, f, n)
#     print('n:%d I: %f integral: %f error: %10.6e' % (n, I, integral, abs(I-integral)))

def Gaussian_Integral_triangular_2D(vertices, f, n, integration_type=integration.INTEGRATION):
    # x : coordinate
    # y : coordinate
    # vertices: the coordinates of the triangle
    # f : the function of integral.
    # n : the order of approximate error.    
    x1 = vertices[0, 0]
    y1 = vertices[0, 1]
    x2 = vertices[1, 0]
    y2 = vertices[1, 1]
    x3 = vertices[2, 0]
    y3 = vertices[2, 1]
    Jx1 = x2-x1
    Jx2 = x3-x1
    Jy1 = y2-y1
    Jy2 = y3-y1
    J = Jx1*Jy2 - Jx2*Jy1
    def shift_xy(node):
        x = node[:, 0]
        y = node[:, 1]
        new_x = (Jx1*x + Jx2*y) + x1
        new_y = (Jy1*x + Jy2*y) + y1
        return new_x, new_y

    if n==1:
        nodes = np.array([[0.333333333333333, 0.333333333333333]],dtype=np.float64)
        weights = np.array([1.0],dtype=np.float64)
    elif n==2:
        # nodes = np.array([[0.5, 0.5], [0.5, 0], [0, 0.5]],dtype=np.float64)
        nodes = np.array([
            [0.166666666666667, 0.666666666666667],
            [0.166666666666667, 0.166666666666667],
            [0.666666666666667, 0.166666666666667]
        ],dtype=np.float64)
        weights = np.array([
            0.333333333333333,
            0.333333333333333,
            0.333333333333333
        ],dtype=np.float64)
    elif n==3:
        nodes = np.array([
            [0.333333333333333, 0.333333333333333],
            [0.2, 0.6],
            [0.2, 0.2],
            [0.6, 0.2]
        ],dtype=np.float64)
        weights = np.array([
            -0.5625,
            0.520833333333333,
            0.520833333333333,
            0.520833333333333
        ],dtype=np.float64)
    elif n==4:
        nodes = np.array([
            [0.445948490915965, 0.108103018168070],
            [0.445948490915965, 0.445948490915965],
            [0.108103018168070, 0.445948490915965],
            [0.091576213509771, 0.816847572980459],
            [0.091576213509771, 0.091576213509771],
            [0.816847572980459, 0.091576213509771]
        ],dtype=np.float64)
        weights = np.array([
            0.223381589678011,
            0.223381589678011,
            0.223381589678011,
            0.109951743655322,
            0.109951743655322,
            0.109951743655322
        ],dtype=np.float64)
    elif n==5:
        nodes = np.array([
            [0.333333333333333, 0.333333333333333],
            [0.470142064105115, 0.059715871789770],
            [0.470142064105115, 0.470142064105115],
            [0.059715871789770, 0.470142064105115],
            [0.101286507323456, 0.797426985353087],
            [0.101286507323456, 0.101286507323456],
            [0.797426985353087, 0.101286507323456]
        ],dtype=np.float64)
        weights = np.array([
            0.225,
            0.132394152788506,
            0.132394152788506,
            0.132394152788506,
            0.125939180544827,
            0.125939180544827,
            0.125939180544827
        ],dtype=np.float64)
    elif n==6:
        nodes = np.array([
            [0.063089014491502, 0.873821971016996],
            [0.063089014491502, 0.063089014491502],
            [0.873821971016996, 0.063089014491502],
            [0.053145049844817, 0.636502499121399],
            [0.310352451033784, 0.053145049844817],
            [0.636502499121399, 0.310352451033784],
            [0.310352451033784, 0.636502499121399],
            [0.053145049844817, 0.310352451033784],
            [0.636502499121399, 0.053145049844817],
            [0.249286745170910, 0.501426509658179],
            [0.249286745170910, 0.249286745170910],
            [0.501426509658179, 0.249286745170910]
        ],dtype=np.float64)
        weights = np.array([
            0.050844906370207,
            0.050844906370207,
            0.050844906370207,
            0.082851075618374,
            0.082851075618374,
            0.082851075618374,
            0.082851075618374,
            0.082851075618374,
            0.082851075618374,
            0.116786275726379,
            0.116786275726379,
            0.116786275726379
        ],dtype=np.float64)
    elif n==7:
        nodes = np.array([
            [0.333333333333333, 0.333333333333333],
            [0.065130102902216, 0.869739794195568],
            [0.065130102902216, 0.065130102902216],
            [0.869739794195568, 0.065130102902216],
            [0.048690315425316, 0.638444188569810],
            [0.312865496004874, 0.048690315425316],
            [0.638444188569810, 0.312865496004874],
            [0.312865496004874, 0.638444188569810],
            [0.048690315425316, 0.312865496004874],
            [0.638444188569810, 0.048690315425316],
            [0.260345966079040, 0.479308067841920],
            [0.260345966079040, 0.260345966079040],
            [0.479308067841920, 0.260345966079040]
        ],dtype=np.float64)
        weights = np.array([
            -0.149570044467682,
            0.053347235608838,
            0.053347235608838,
            0.053347235608838,
            0.077113760890257,
            0.077113760890257,
            0.077113760890257,
            0.077113760890257,
            0.077113760890257,
            0.077113760890257,
            0.175615257433208,
            0.175615257433208,
            0.175615257433208
        ],dtype=np.float64)
    elif n==8:
        nodes = np.array([
            [0.333333333333333, 0.333333333333333],
            [0.459292588292723, 0.081414823414554],
            [0.459292588292723, 0.459292588292723],
            [0.081414823414554, 0.459292588292723],
            [0.170569307751760, 0.658861384496480],
            [0.170569307751760, 0.170569307751760],
            [0.658861384496480, 0.170569307751760],
            [0.008394777409958, 0.728492392955404],
            [0.263112829634638, 0.008394777409958],
            [0.728492392955404, 0.263112829634638],
            [0.263112829634638, 0.728492392955404],
            [0.008394777409958, 0.263112829634638],
            [0.728492392955404, 0.008394777409958],
            [0.050547228317031, 0.898905543365938],
            [0.050547228317031, 0.050547228317031],
            [0.898905543365938, 0.050547228317031]
        ],dtype=np.float64)
        weights = np.array([
            0.144315607677787,
            0.095091634267285,
            0.095091634267285,
            0.095091634267285,
            0.103217370534718,
            0.103217370534718,
            0.103217370534718,
            0.027230314174435,
            0.027230314174435,
            0.027230314174435,
            0.027230314174435,
            0.027230314174435,
            0.027230314174435,
            0.032458497623198,
            0.032458497623198,
            0.032458497623198
        ],dtype=np.float64)
    elif n==9:
        nodes = np.array([
            [0.333333333333333, 0.333333333333333],
            [0.489682519198738, 0.020634961602525],
            [0.489682519198738, 0.489682519198738],
            [0.020634961602525, 0.489682519198738],
            [0.437089591492937, 0.125820817014127],
            [0.437089591492937, 0.437089591492937],
            [0.125820817014127, 0.437089591492937],
            [0.188203535619033, 0.623592928761935],
            [0.188203535619033, 0.188203535619033],
            [0.623592928761935, 0.188203535619033],
            [0.036838412054736, 0.741198598784498],
            [0.221962989160766, 0.036838412054736],
            [0.741198598784498, 0.221962989160766],
            [0.221962989160766, 0.741198598784498],
            [0.036838412054736, 0.221962989160766],
            [0.741198598784498, 0.036838412054736],
            [0.044729513394453, 0.910540973211095],
            [0.044729513394453, 0.044729513394453],
            [0.910540973211095, 0.044729513394453]
        ],dtype=np.float64)
        weights = np.array([
            0.097135796282799,
            0.031334700227139,
            0.031334700227139,
            0.031334700227139,
            0.077827541004774,
            0.077827541004774,
            0.077827541004774,
            0.079647738927210,
            0.079647738927210,
            0.079647738927210,
            0.043283539377289,
            0.043283539377289,
            0.043283539377289,
            0.043283539377289,
            0.043283539377289,
            0.043283539377289,
            0.025577675658698,
            0.025577675658698,
            0.025577675658698
        ],dtype=np.float64)
    elif n==10:
        nodes = np.array([
            [0.333333333333333, 0.333333333333333],
            [0.485577633383657, 0.028844733232685],
            [0.485577633383657, 0.485577633383657],
            [0.028844733232685, 0.485577633383657],
            [0.141707219414880, 0.550352941820999],
            [0.307939838764121, 0.141707219414880],
            [0.550352941820999, 0.307939838764121],
            [0.307939838764121, 0.550352941820999],
            [0.141707219414880, 0.307939838764121],
            [0.550352941820999, 0.141707219414880],
            [0.025003534762686, 0.728323904597411],
            [0.246672560639903, 0.025003534762686],
            [0.728323904597411, 0.246672560639903],
            [0.246672560639903, 0.728323904597411],
            [0.025003534762686, 0.246672560639903],
            [0.728323904597411, 0.025003534762686],
            [0.009540815400299, 0.923655933587500],
            [0.066803251012200, 0.009540815400299],
            [0.923655933587500, 0.066803251012200],
            [0.066803251012200, 0.923655933587500],
            [0.009540815400299, 0.066803251012200],
            [0.923655933587500, 0.009540815400299],
            [0.109481575485037, 0.781036849029926],
            [0.109481575485037, 0.109481575485037],
            [0.781036849029926, 0.109481575485037]
        ],dtype=np.float64)
        weights = np.array([
            0.090817990382754,
            0.036725957756467,
            0.036725957756467,
            0.036725957756467,
            0.072757916845420,
            0.072757916845420,
            0.072757916845420,
            0.072757916845420,
            0.072757916845420,
            0.072757916845420,
            0.028327242531057,
            0.028327242531057,
            0.028327242531057,
            0.028327242531057,
            0.028327242531057,
            0.028327242531057,
            0.009421666963733,
            0.009421666963733,
            0.009421666963733,
            0.009421666963733,
            0.009421666963733,
            0.009421666963733,
            0.045321059435528,
            0.045321059435528,
            0.045321059435528
        ],dtype=np.float64)
    else:
        ValueError("The number of n=%d exceeds the limit!" % n)
    if integration_type == integration.INTEGRATION:
        integral = np.sum(0.5 * weights * f(*shift_xy(nodes))) * J
    elif integration_type == integration.MAX:
        integral = np.max(f(*shift_xy(nodes)))
    else:
        ValueError("The integration type is not correct!")
    return integral

# # Test Gaussian_Integral_triangular_2D
# N_Max = 10
# for i in range(N_Max):
#     n = i+1
#     def f1(x, y):
#         u = (x**4+y**4)/(1+x**2*y)
#         return u
#     # f1 = lambda x, y: (x**4+y**4)/(1+x**2*y)
#     vertices = np.array([[0, 0], [0.5, 0], [0, 0.5]],dtype=np.float64)
#     I = 0.001036548803302
#     integral = Gaussian_Integral_triangular_2D(vertices, f1, n)
#     print('f1 n:%d I: %f integral: %f error: %10.6e' % (n, I, integral, abs(I-integral)))

# print('\n')

# for i in range(N_Max):
#     n = i+1
#     def f2(x, y):
#         u = 1/np.sqrt((1+x)**2+y**2)
#         return u
#     # f2 = lambda x, y: 1/np.sqrt((1+x)**2+y**2)
#     vertices = np.array([[0, 0], [2, 0], [0, 2]],dtype=np.float64)
#     I = 1.120666910443430
#     integral = Gaussian_Integral_triangular_2D(vertices, f2, n)
#     print('f2 n:%d I: %f integral: %f error: %10.6e' % (n, I, integral, abs(I-integral)))

# print('\n')

# for i in range(N_Max):
#     n = i+1
#     def f2(x, y):
#         u = x**2 + y**2
#         return u
#     # I = 0.052734375000001
#     # vertices = np.array([[-1, -1], [-0.75, -1], [-1, -0.75]],dtype=np.float64)
#     I = 0.043619791666666
#     vertices = np.array([[-1., -0.75], [-0.75, -1.], [-0.75, -0.75]])
#     integral = Gaussian_Integral_triangular_2D(vertices, f2, n)
#     print('f2 n:%d I: %f integral: %f error: %10.6e' % (n, I, integral, abs(I-integral)))