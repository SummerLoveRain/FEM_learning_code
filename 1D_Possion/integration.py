import math
import numpy as np

def Gaussian_Integral(a, b, f, n):
    '''
    a : the lower bound.
    b : the upper bound.
    f : the function of integral.
    n : the number of points which is used to approximate the integral.
    return : the integral of function f in domain [a, b]
    '''
    shift_x = lambda s : (b + a + (b - a) * s) / 2
    N_MAX = 20
    n = int(n)
    if n<1 or n >N_MAX:
        print("The number of n=%d exceeds the limit!" % n)
    elif n == 1: #中心点积分，1阶段精度
        nodes = np.array([0.0],dtype=np.float64)
        weights = np.array([2.0],dtype=np.float64)
    elif n == 2: #两点积分，3阶精度
        nodes = np.array([-0.5773502691896250, 0.5773502691896250],dtype=np.float64)
        weights = np.array([1.0, 1.0],dtype=np.float64)
    elif n == 3: #三点积分，5阶精度
        nodes = np.array([-0.7745966692414830, 0.0, 0.7745966692414830],dtype=np.float64)
        weights = np.array([0.5555555555555550, 0.8888888888888880, 0.5555555555555550],dtype=np.float64)
    elif n == 4: #4点积分，7阶精度
        nodes = np.array([-0.8611363115940520, -0.3399810435848560, 0.3399810435848560, 0.8611363115940520],dtype=np.float64)
        weights = np.array([0.3478548451374530, 0.6521451548625460, 0.6521451548625460, 0.3478548451374530], dtype=np.float64)
    elif n == 5:
        nodes = np.array([-0.9061798459386640, -0.5384693101056830, 0.0, 0.5384693101056830, 0.9061798459386640],dtype=np.float64)
        weights = np.array([0.2369268850561890, 0.4786286704993660, 0.5688888888888880, 0.4786286704993660, 0.2369268850561890], dtype=np.float64)
    elif n == 6:
        nodes = np.array([-0.9324695142031520, -0.6612093864662640, -0.2386191860831960, 0.2386191860831960, 0.6612093864662640, 0.9324695142031520],dtype=np.float64)
        weights = np.array([0.1713244923791700, 0.3607615730481380, 0.4679139345726910, 0.4679139345726910, 0.3607615730481380, 0.1713244923791700], dtype=np.float64)
    elif n == 7:
        nodes = np.array([-0.9491079123427580, -0.7415311855993940, -0.4058451513773970, 0.0, 0.4058451513773970, 0.7415311855993940, 0.9491079123427580],dtype=np.float64)
        weights = np.array([0.1294849661688690, 0.2797053914892760, 0.3818300505051180, 0.4179591836734690, 0.3818300505051180, 0.2797053914892760, 0.1294849661688690], dtype=np.float64)
    elif n == 8:
        nodes = np.array([-0.9602898564975360, -0.7966664774136260, -0.5255324099163290, -0.1834346424956490, 0.1834346424956490, 0.5255324099163290, 0.7966664774136260, 0.9602898564975360],dtype=np.float64)
        weights = np.array([0.1012285362903760, 0.2223810344533740, 0.3137066458778870, 0.3626837833783620, 0.3626837833783620, 0.3137066458778870, 0.2223810344533740, 0.1012285362903760], dtype=np.float64)
    elif n == 9:
        nodes = np.array([-0.9681602395076260, -0.8360311073266350, -0.6133714327005900, -0.3242534234038080, 0.0, 0.3242534234038080, 0.6133714327005900, 0.8360311073266350, 0.9681602395076260], dtype=np.float64)
        weights = np.array([0.0812743883615744, 0.1806481606948570, 0.2606106964029350, 0.3123470770400020, 0.3302393550012590, 0.3123470770400020, 0.2606106964029350, 0.1806481606948570, 0.0812743883615744],dtype=np.float64)
    elif n == 10:
        nodes = np.array([-0.9739065285171710, -0.8650633666889840, -0.6794095682990240, -0.4333953941292470, -0.1488743389816310, 0.1488743389816310, 0.4333953941292470, 0.6794095682990240, 0.8650633666889840, 0.9739065285171710], dtype=np.float64)
        weights = np.array([0.0666713443086881, 0.1494513491505800, 0.2190863625159820, 0.2692667193099960, 0.2955242247147520, 0.2955242247147520, 0.2692667193099960, 0.2190863625159820, 0.1494513491505800, 0.0666713443086881],dtype=np.float64)
    elif n == 11:
        nodes = np.array([-0.9782286581460570, -0.8870625997680950, -0.7301520055740490, -0.5190961292068110, -0.2695431559523440, 0.0, 0.2695431559523440, 0.5190961292068110, 0.7301520055740490, 0.8870625997680950, 0.9782286581460570], dtype=np.float64)
        weights = np.array([0.0556685671161736, 0.1255803694649040, 0.1862902109277340, 0.2331937645919900, 0.2628045445102460, 0.2729250867779000, 0.2628045445102460, 0.2331937645919900, 0.1862902109277340, 0.1255803694649040, 0.0556685671161736],dtype=np.float64)
    elif n == 12:
        nodes = np.array([-0.9815606342467190, -0.9041172563704740, -0.7699026741943040, -0.5873179542866170, -0.3678314989981800, 0.1252334085114680, 0.1252334085114680, 0.3678314989981800, 0.5873179542866170, 0.7699026741943040, 0.9041172563704740, 0.9815606342467190], dtype=np.float64)
        weights = np.array([0.0471753363865118, 0.1069393259953180, 0.1600783285433460, 0.2031674267230650, 0.2334925365383540, 0.2491470458134020, 0.2491470458134020, 0.2334925365383540, 0.2031674267230650, 0.1600783285433460, 0.1069393259953180, 0.0471753363865118],dtype=np.float64)
    elif n == 13:
        nodes = np.array([-0.9841830547185880, 0.9175983992229770, -0.8015780907333090, -0.6423493394403400, 0.4484927510364460, -0.2304583159551340, 0.0000000000000000, 0.2304583159551340, 0.4484927510364460, 0.6423493394403400, 0.8015780907333090, 0.9175983992229770, 0.9841830547185880], dtype=np.float64)
        weights = np.array([0.0404840047653158, 0.0921214998377284, 0.1388735102197870, 0.1781459807619450, 0.2078160475368880, 0.2262831802628970, 0.2325515532308730, 0.2262831802628970, 0.2078160475368880, 0.1781459807619450, 0.1388735102197870, 0.0921214998377284, 0.0404840047653158],dtype=np.float64)
    elif n == 14:
        nodes = np.array([-0.9862838086968120, -0.9284348836635730, -0.8272013150697650, -0.6872929048116850, -0.5152486363581540, -0.3191123689278890, 0.1080549487073430, 0.1080549487073430, 0.3191123689278890, 0.5152486363581540, 0.6872929048116850, 0.8272013150697650, 0.9284348836635730, 0.9862838086968120], dtype=np.float64)
        weights = np.array([0.0351194603317518, 0.0801580871597602, 0.1215185706879030, 0.1572031671581930, 0.1855383974779370, 0.2051984637212950, 0.2152638534631570, 0.2152638534631570, 0.2051984637212950, 0.1855383974779370, 0.1572031671581930, 0.1215185706879030, 0.0801580871597602, 0.0351194603317518],dtype=np.float64)
    elif n == 15:
        nodes = np.array([-0.9879925180204850, -0.9372733924007060, -0.8482065834104270, -0.7244177313601700, -0.5709721726085380, 0.3941513470775630, 0.2011940939974340, 0.0000000000000000, 0.2011940939974340, 0.3941513470775630, 0.5709721726085380, 0.7244177313601700, 0.8482065834104270, 0.9372733924007060, 0.9879925180204850], dtype=np.float64)
        weights = np.array([0.0307532419961172, 0.0703660474881081, 0.1071592204671710, 0.1395706779261540, 0.1662692058169930, 0.1861610000155620, 0.1984314853271110, 0.2025782419255610, 0.1984314853271110, 0.1861610000155620, 0.1662692058169930, 0.1395706779261540, 0.1071592204671710, 0.0703660474881081, 0.0307532419961172],dtype=np.float64)
    elif n == 16:
        nodes = np.array([-0.9894009349916490, -0.9445750230732320, -0.8656312023878310, -0.7554044083550030, -0.6178762444026430, -0.4580167776572270, -0.2816035507792580, -0.0950125098376374, 0.0950125098376374, 0.2816035507792580, 0.4580167776572270, 0.6178762444026430, 0.7554044083550030, 0.8656312023878310, 0.9445750230732320, 0.9894009349916490], dtype=np.float64)
        weights = np.array([0.0271524594117540, 0.0622535239386478, 0.0951585116824927, 0.1246289712555330, 0.1495959888165760, 0.1691565193950020, 0.1826034150449230, 0.1894506104550680, 0.1894506104550680, 0.1826034150449230, 0.1691565193950020, 0.1495959888165760, 0.1246289712555330, 0.0951585116824927, 0.0622535239386478, 0.0271524594117540],dtype=np.float64)
    elif n == 17:
        nodes = np.array([-0.9905754753144170, -0.9506755217687670, -0.8802391537269850, -0.7815140038968010, -0.6576711592166900, -0.5126905370864760, -0.3512317634538760, -0.1784841814958470, 0.0000000000000000, 0.1784841814958470, 0.3512317634538760, 0.5126905370864760, 0.6576711592166900, 0.7815140038968010, 0.8802391537269850, 0.9506755217687670, 0.9905754753144170], dtype=np.float64)
        weights = np.array([0.0241483028685479, 0.0554595293739872, 0.0850361483171791, 0.1118838471934030, 0.1351363684685250, 0.1540457610768100, 0.1680041021564500, 0.1765627053669920, 0.1794464703562060, 0.1765627053669920, 0.1680041021564500, 0.1540457610768100, 0.1351363684685250, 0.1118838471934030, 0.0850361483171791, 0.0554595293739872, 0.0241483028685479],dtype=np.float64)
    elif n == 18:
        nodes = np.array([-0.9915651684209300, -0.9558239495713970, -0.8926024664975550, -0.8037049589725230, -0.6916870430603530, -0.5597708310739470, -0.4117511614628420, -0.2518862256915050, -0.0847750130417353, 0.0847750130417353, 0.2518862256915050, 0.4117511614628420, 0.5597708310739470, 0.6916870430603530, 0.8037049589725230, 0.8926024664975550, 0.9558239495713970, 0.9915651684209300], dtype=np.float64)
        weights = np.array([0.0216160135264833, 0.0497145488949698, 0.0764257302548890, 0.1009420441062870, 0.1225552067114780, 0.1406429146706500, 0.1546846751262650, 0.1642764837458320, 0.1691423829631430, 0.1691423829631430, 0.1642764837458320, 0.1546846751262650, 0.1406429146706500, 0.1225552067114780, 0.1009420441062870, 0.0764257302548890, 0.0497145488949698, 0.0216160135264833],dtype=np.float64)
    elif n == 19:
        nodes = np.array([-0.9924068438435840, -0.9602081521348300, -0.9031559036148170, -0.8227146565371420, -0.7209661773352290, -0.6005453046616810, -0.4645707413759600, -0.3165640999636290, -0.1603586456402250, 0.0000000000000000, 0.1603586456402250, 0.3165640999636290, 0.4645707413759600, 0.6005453046616810, 0.7209661773352290, 0.8227146565371420, 0.9031559036148170, 0.9602081521348300, 0.9924068438435840], dtype=np.float64)
        weights = np.array([0.0194617882297264, 0.0448142267656996, 0.0690445427376412, 0.0914900216224500, 0.1115666455473330, 0.1287539625393360, 0.1426067021736060, 0.1527660420658590, 0.1589688433939540, 0.1610544498487830, 0.1589688433939540, 0.1527660420658590, 0.1426067021736060, 0.1287539625393360, 0.1115666455473330, 0.0914900216224500, 0.0690445427376412, 0.0448142267656996, 0.0194617882297264],dtype=np.float64)
    elif n == 20:
        nodes = np.array([-0.9931285991850940, -0.9639719272779130, -0.9122344282513260, -0.8391169718222180, -0.7463319064601500, -0.6360536807265150, -0.5108670019508270, -0.3737060887154190, -0.2277858511416450, -0.0765265211334973, 0.0765265211334973, 0.2277858511416450, 0.3737060887154190, 0.5108670019508270, 0.6360536807265150, 0.7463319064601500, 0.8391169718222180, 0.9122344282513260, 0.9639719272779130, 0.9931285991850940], dtype=np.float64)
        weights = np.array([0.0176140071391521, 0.0406014298003869, 0.0626720483341090, 0.0832767415767047, 0.1019301198172400, 0.1181945319615180, 0.1316886384491760, 0.1420961093183820, 0.1491729864726030, 0.1527533871307250, 0.1527533871307250, 0.1491729864726030, 0.1420961093183820, 0.1316886384491760, 0.1181945319615180, 0.1019301198172400, 0.0832767415767047, 0.0626720483341090, 0.0406014298003869, 0.0176140071391521],dtype=np.float64)
    integral = (b-a)/2 * np.sum(weights * f(shift_x(nodes)))
    return integral

# # Test Gauassian_Integral
# a = 1
# b = 2
# for i in range(20):
#     n = i + 1
#     f = lambda x : np.log(x)
#     I = 0.386294361119891
#     integral = Gaussian_Integral(a, b, f, n)
#     print('n:%d I: %f integral: %f error: %10.6e' % (n, I, integral, abs(I-integral)))
#     f = lambda x : (x**2 + 2*x + 1)/(1 + (1+x)**4)
#     I = 0.161442165779443
#     integral = Gaussian_Integral(a, b, f, n)
#     print('n:%d I: %f integral: %f error: %10.6e' % (n, I, integral, abs(I-integral)))